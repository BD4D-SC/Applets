S
# representation pour les donnees spheriques
Rinv <- solve(chol(What))
plot(Rinv %*% mydata[, 1:2])
mydata[, 1:2]
plot(t(Rinv %*% t(mydata[, 1:2])))
plot(mydata[, 1:2] %*% Rinv)
plot(t(Rinv %*% t(mydata[, 1:2])))
S <- t(Rinv) %*% Bhat %*% Rinv
vtilde <- eigen(S)$vectors
v
vtilde
v2 <- Rinv %*% vtilde
v2
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat[1] + t * v[1, 1]
y <- meanHat[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanHat[1] + t * v[1, 2]
y <- meanHat[2] + t * v[2, 2]
lines(x, y)
source('~/Documents/Cours exploration/ldaEssai.R')
# representation pour les donnees spheriques
R <- chol(What)
Rinv <- solve(R)
plot(t(R %*% t(mydata[, 1:2])))
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat[1] + t * v[1, 1]
y <- meanHat[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanHat[1] + t * v[1, 2]
y <- meanHat[2] + t * v[2, 2]
lines(x, y)
mydata2 <- mydata[, 1:2] %*% R
dim(mydata[, 1:2])
dim(Rinv)
dim(R)
# representation pour les donnees spheriques
R <- chol(What)
Rinv <- solve(R)
mydata2 <- mydata[, 1:2] %*% R
str(mydata[, 1:2])
mydata2 <- as.matrix(mydata[, 1:2]) %*% R
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
plot(mydata2)
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat[1] + t * v[1, 1]
mydata2 <- R %*% t(as.matrix(mydata[, 1:2]))
meanHat2 <- R %*% meanHat
plot(mydata2)
str(mydata2)
plot(t(mydata2))
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat[1] + t * v[1, 1]
x <- meanHat2[1] + t * v[1, 1]
y <- meanHat2[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanHat2[1] + t * v[1, 2]
y <- meanHat2[2] + t * v[2, 2]
lines(x, y)
mydata2 <- Rinv %*% t(as.matrix(mydata[, 1:2]))
meanHat2 <- R %*% meanHat
plot(t(mydata2))
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat2[1] + t * v[1, 1]
y <- meanHat2[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanHat2[1] + t * v[1, 2]
y <- meanHat2[2] + t * v[2, 2]
lines(x, y)
meanHat2 <- Rinv %*% meanHat
plot(t(mydata2))
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat2[1] + t * v[1, 1]
y <- meanHat2[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanHat2[1] + t * v[1, 2]
y <- meanHat2[2] + t * v[2, 2]
lines(x, y)
source('~/Documents/Cours exploration/ldaEssai.R')
plot(t(mydata2), asp = 1)
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat2[1] + t * v[1, 1]
y <- meanHat2[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanHat2[1] + t * v[1, 2]
y <- meanHat2[2] + t * v[2, 2]
lines(x, y)
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
plot(t(mydata2), asp = 1, col = as.integer(mydata$group))
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat2[1] + t * v[1, 1]
y <- meanHat2[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanHat2[1] + t * v[1, 2]
y <- meanHat2[2] + t * v[2, 2]
lines(x, y)
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
mydata2 <- t(Rinv) %*% t(as.matrix(mydata[, 1:2]))
meanHat2 <- t(Rinv) %*% meanHat
plot(t(mydata2), asp = 1, col = as.integer(mydata$group))
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanHat2[1] + t * v[1, 1]
y <- meanHat2[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanHat2[1] + t * v[1, 2]
y <- meanHat2[2] + t * v[2, 2]
lines(x, y)
t(R) %*% R
What
source('~/Documents/Cours exploration/ldaEssai.R')
points(meanHat2, col = "blue", pch = 19, lwd = 2)
meanHat2
gHat2 <- t(Rinv) %*% gHat
plot(t(mydata2), asp = 1, col = as.integer(mydata$group))
points(gHat2, col = "blue", pch = 19, lwd = 2)
ghat2 <- t(Rinv) %*% ghat
plot(t(mydata2), asp = 1, col = as.integer(mydata$group))
points(ghat2, col = "blue", pch = 19, lwd = 2)
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanhat2[1] + t * v[1, 1]
meanhat2 <- t(Rinv) %*% meanhat
plot(t(mydata2), asp = 1, col = as.integer(mydata$group))
# 2nd axis
x <- meanhat[1] + t * v[1, 2]
y <- meanhat[2] + t * v[2, 2]
lines(x, y)
# representation pour les donnees spheriques
R <- chol(What)  # t(R) %*% R = What
Rinv <- solve(R)
mydata2 <- t(Rinv) %*% t(as.matrix(mydata[, 1:2]))
ghat2 <- t(Rinv) %*% ghat
meanhat2 <- t(Rinv) %*% meanhat
source('~/Documents/Cours exploration/ldaEssai.R')
ghat
ghat2 <- t(Rinv) %*% t(ghat)
meanhat2 <- t(Rinv) %*% meanhat
plot(t(mydata2), asp = 1, col = as.integer(mydata$group))
points(ghat2, col = "blue", pch = 19, lwd = 2)
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
# 1st axis
t <- c(-10, 10)
x <- meanhat2[1] + t * v[1, 1]
y <- meanhat2[2] + t * v[2, 1]
lines(x, y)
# 2nd axis
x <- meanhat2[1] + t * v[1, 2]
y <- meanhat2[2] + t * v[2, 2]
lines(x, y)
source('~/Documents/Cours exploration/ldaEssai.R')
meanhat2 <- t(t(Rinv) %*% meanhat)
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
source('~/Documents/Cours exploration/ldaEssai.R')
z
v
str(z)
z$scaling
-1.43/2.28
v[2,2]/v[1,1]
v[2,2]/v[1,2]
v <- eigen(S)$vectors
# Rinv <- solve(chol(What))
S <- Bhat %*% solve(What)
v <- eigen(S)$vectors
# vtilde <- eigen(S)$vectors
# v <- Rinv %*% vtilde
# 1st axis
t <- c(-10, 10)
x <- meanhat[1] + t * v[1, 1]
y <- meanhat[2] + t * v[2, 1]
v
S <- t(Rinv) %*% Bhat %*% Rinv
v <- eigen(S)$vectors
v
0.59/0.80
help(lda)
z$svd
eigen(S)$values
S
det(S)
Bhat
det(Bhat)
z$prior
example(lda)
z
source('~/Documents/Cours exploration/ldaEssai.R')
z
v
Rinb
Rinv
plot(z)
example(lda)
plot(z)
pairs(Iris)
pairs(Iris, col = as.integer(Iris$Sp))
plot(z, col = as.integer(Iris$Sp))
z
plot(z, col = as.integer(train$Sp))
train
plot(z, col = as.integer(Iris[train, ]$Sp))
pairs(Iris, col = as.integer(Iris$Sp))
plot(z, col = as.integer(Iris[train, ]$Sp))
z
library(shiny)
help(shiny)
runApp('Documents/wikistat/PCA-App')
source("PCA_util.R")
library(MASS)
setwd("~/Documents/wikistat/PCA-App")
runApp()
library(shiny)
setwd("~/Documents/wikistat/PCA-App")
source("PCA_util.R")
library(MASS)
rho12 <- 0.8
sigma1 <- 2
sigma2 <- 1
Sigma <- matrix(c(sigma1^2, rho12 * sigma1 * sigma2,
rho12 * sigma1 * sigma2, sigma2^2), nrow = 2)
d <- 2
n <- 20
set.seed(2)
x <- mvrnorm(n = n, mu = rep(0, d), Sigma = Sigma)
x <- scale(x, center = TRUE, scale = FALSE)
colnames(x) <- c("x1", "x2")
ui <- fluidPage(
# "An applet for Principal Component Analysis"
sliderInput(inputId = "angle",
label = "Choose an angle",
value = 10, min = 0, max = 180),
plotOutput(outputId = "PCA2Dplot")
)
# Define server logic required to plot various variables against mpg
server <- function(input, output){
output$PCA2Dplot <- renderPlot(
PCAturningLine(x, input$angle)
)
}
shinyApp(ui = ui, server = server)
runApp()
help("shinyApp")
runApp()
runApp()
init <- function(n){
rho12 <- 0.8
sigma1 <- 2
sigma2 <- 1
Sigma <- matrix(c(sigma1^2, rho12 * sigma1 * sigma2,
rho12 * sigma1 * sigma2, sigma2^2), nrow = 2)
d <- 2
n <- n
set.seed(2)
x <- mvrnorm(n = n, mu = rep(0, d), Sigma = Sigma)
x <- scale(x, center = TRUE, scale = FALSE)
colnames(x) <- c("x1", "x2")
return(x)
}
x <- init(n)
ui <- fluidPage(
# "An applet for Principal Component Analysis"
sliderInput(inputId = "n",
label = "Number of points",
value = 20, min = 2, max = 100),
sliderInput(inputId = "angle",
label = "Choose an angle",
value = 10, min = 0, max = 180),
plotOutput(outputId = "PCA2Dplot")
)
# Define server logic required to plot various variables against mpg
server <- function(input, output){
output$PCA2Dplot <- renderPlot(
PCAturningLine(x, input$angle)
)
}
shinyApp(ui = ui, server = server)
library(shiny)
source("PCA_util.R")
library(MASS)
rho12 <- 0.8
sigma1 <- 2
sigma2 <- 1
Sigma <- matrix(c(sigma1^2, rho12 * sigma1 * sigma2,
rho12 * sigma1 * sigma2, sigma2^2), nrow = 2)
d <- 2
n <- 20
set.seed(2)
library(shiny)
setwd("~/Documents/wikistat/PCA-App")
source("PCA_util.R")
library(MASS)
init <- function(n){
rho12 <- 0.8
sigma1 <- 2
sigma2 <- 1
Sigma <- matrix(c(sigma1^2, rho12 * sigma1 * sigma2,
rho12 * sigma1 * sigma2, sigma2^2), nrow = 2)
d <- 2
n <- n
set.seed(2)
x <- mvrnorm(n = n, mu = rep(0, d), Sigma = Sigma)
x <- scale(x, center = TRUE, scale = FALSE)
colnames(x) <- c("x1", "x2")
return(x)
}
x <- init(n)
ui <- fluidPage(
# "An applet for Principal Component Analysis"
sliderInput(inputId = "n",
label = "Number of points",
value = 20, min = 2, max = 100),
sliderInput(inputId = "angle",
label = "Choose an angle",
value = 10, min = 0, max = 180),
plotOutput(outputId = "PCA2Dplot")
)
# Define server logic required to plot various variables against mpg
server <- function(input, output){
output$PCA2Dplot <- renderPlot(
PCAturningLine(x, input$angle)
)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
library(shiny)
setwd("~/Documents/wikistat/PCA-App")
source("PCA_util.R")
library(MASS)
ui <- fluidPage(
# "An applet for Principal Component Analysis"
sliderInput(inputId = "n",
label = "Number of points",
value = 20, min = 2, max = 100),
sliderInput(inputId = "angle",
label = "Choose an angle",
value = 10, min = 0, max = 180),
plotOutput(outputId = "PCA2Dplot")
)
# Define server logic required to plot various variables against mpg
server <- function(input, output){
output$PCA2Dplot <- renderPlot(
PCAturningLine(input$n, input$angle)
)
}
shinyApp(ui = ui, server = server)
init(20)
x <- init(20)
runApp()
runApp()
runApp()
runApp()
runApp()
help("sliderInput")
runApp()
runApp()
runApp()
runApp()
example("radioButtons")
example(actionButton)
example("checkboxInput")
example("checkboxGroupInput")
example(submitButton)
runApp()
runApp()
runApp()
example("observeEvent")
example("radioButtons")
example(selectInput)
runApp()
runApp()
runApp()
ui <- fluidPage(
radioButtons("rb", "Choose one:",
choiceNames = list(
icon("calendar"),
HTML("<p style='color:red;'>Red Text</p>"),
"Normal text"
),
choiceValues = list(
"icon", "html", "text"
)),
textOutput("txt")
)
server <- function(input, output) {
output$txt <- renderText({
paste("You chose", input$rb)
})
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(fluidPage)
example(fluidPage)
example("sidebarLayout")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("fluidPage")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
